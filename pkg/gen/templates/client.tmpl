// Code generated by oapix-gen. DO NOT EDIT.
package {{.Package}}

import (
{{range .Imports}}	"{{.}}"
{{end}})

// {{.ClientName}} is the client for the API
type {{.ClientName}} struct {
	client.Client
}

// New{{.ClientName}} creates a new API client
func New{{.ClientName}}(config *client.Config) (*{{.ClientName}}, error) {
	baseClient, err := client.NewBaseClient(config)
	if err != nil {
		return nil, err
	}

	return &{{.ClientName}}{
		Client: baseClient,
	}, nil
}

{{range .Operations}}
{{if .Description}}{{goDoc .Description ""}}{{end}}
func (c *{{$.ClientName}}) {{.Name}}({{buildMethodSignature .}}) {{if .SuccessResponse}}{{if .SuccessResponse.Type}}(*{{.SuccessResponse.Type}}, error){{else}}error{{end}}{{else}}error{{end}} {
	path := fmt.Sprintf("{{buildPath .Path .Parameters}}"{{range filterParamsByIn .Parameters "path"}}, {{.Name}}{{end}})

{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}
	opts := []client.RequestOption{}
{{if hasQueryParams .Parameters}}
	// Add query parameters
{{range filterParamsByIn .Parameters "query"}}
	if params != nil {
		opts = append(opts, client.WithQueryParam("{{.Name}}", fmt.Sprintf("%v", params.{{toPascalCase .Name}})))
	}
{{end}}
{{end}}
{{if hasHeaderParams .Parameters}}
	// Add header parameters
{{range filterParamsByIn .Parameters "header"}}
	if params != nil && params.{{toPascalCase .Name}} != "" {
		opts = append(opts, client.WithHeader("{{.Name}}", params.{{toPascalCase .Name}}))
	}
{{end}}
{{end}}
{{end}}

{{if .SuccessResponse}}{{if .SuccessResponse.Type}}
{{if .RequestBody}}
	resp, err := c.RequestJSON(ctx, "{{.Method}}", path, req{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}, opts...{{end}})
{{else}}
	resp, err := c.Request(ctx, "{{.Method}}", path, nil{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}, opts...{{end}})
{{end}}
	if err != nil {
		return nil, err
	}

	var result {{.SuccessResponse.Type}}
	if err := client.ParseJSON(resp, &result); err != nil {
		return nil, err
	}
	
	return &result, nil
{{else}}
{{if .RequestBody}}
	_, err := c.RequestJSON(ctx, "{{.Method}}", path, req{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}, opts...{{end}})
{{else}}
	_, err := c.Request(ctx, "{{.Method}}", path, nil{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}, opts...{{end}})
{{end}}
	if err != nil {
		return err
	}

	return nil
{{end}}
{{else}}
{{if .RequestBody}}
	_, err := c.RequestJSON(ctx, "{{.Method}}", path, req{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}, opts...{{end}})
{{else}}
	_, err := c.Request(ctx, "{{.Method}}", path, nil{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}, opts...{{end}})
{{end}}
	if err != nil {
		return err
	}

	return nil
{{end}}
}

{{if or (hasQueryParams .Parameters) (hasHeaderParams .Parameters)}}
// {{.Name}}Params contains optional parameters for {{.Name}}
type {{.Name}}Params struct {
{{range .Parameters}}
{{if or (eq .In "query") (eq .In "header")}}
{{if .Description}}{{goDoc .Description "\t"}}{{end}}
	{{toPascalCase .Name}} {{.Type}}
{{end}}
{{end}}
}
{{end}}
{{end}}