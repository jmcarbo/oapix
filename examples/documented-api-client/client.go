// Code generated by oapix-gen. DO NOT EDIT.
package productapi

import (
	"context"
	"fmt"
	"github.com/jmcarbo/oapix/pkg/client"
)

// Client is the client for the API
type Client struct {
	client.Client
}

// NewClient creates a new API client
func NewClient(config *client.Config) (*Client, error) {
	baseClient, err := client.NewBaseClient(config)
	if err != nil {
		return nil, err
	}

	return &Client{
		Client: baseClient,
	}, nil
}

// ListProducts performs a GET request to /products
// List all products
// Retrieves a paginated list of all products in the catalog.
// The results can be filtered by various criteria including
// category, price range, and availability status.
func (c *Client) ListProducts(ctx context.Context, params *ListProductsParams) (*client.MultiResponse, error) {
	path := fmt.Sprintf("/products")

	opts := []client.RequestOption{}

	// Add query parameters

	if params != nil {
		opts = append(opts, client.WithQueryParam("page", fmt.Sprintf("%v", params.Page)))
	}

	if params != nil {
		opts = append(opts, client.WithQueryParam("limit", fmt.Sprintf("%v", params.Limit)))
	}

	if params != nil {
		opts = append(opts, client.WithQueryParam("category", fmt.Sprintf("%v", params.Category)))
	}

	resp, err := c.Request(ctx, "GET", path, nil, opts...)

	if err != nil {
		return nil, err
	}

	return &client.MultiResponse{Response: *resp}, nil
}

// ListProductsParams contains optional parameters for ListProducts
type ListProductsParams struct {

	// Page number for pagination
	Page int64

	// Number of items per page
	Limit int64

	// Filter by product category
	Category string
}

// CreateProduct performs a POST request to /products
// Create a new product
// Creates a new product in the catalog.
// Requires admin authentication.
func (c *Client) CreateProduct(ctx context.Context, req CreateProductRequest) (*client.MultiResponse, error) {
	path := fmt.Sprintf("/products")

	resp, err := c.RequestJSON(ctx, "POST", path, req)

	if err != nil {
		return nil, err
	}

	return &client.MultiResponse{Response: *resp}, nil
}

// GetProductsReviews performs a GET request to /products/{productId}/reviews
// List product reviews
func (c *Client) GetProductsReviews(ctx context.Context, productId string) (*client.MultiResponse, error) {
	path := fmt.Sprintf("/products/%s/reviews", productId)

	resp, err := c.Request(ctx, "GET", path, nil)

	if err != nil {
		return nil, err
	}

	return &client.MultiResponse{Response: *resp}, nil
}

// GetProduct performs a GET request to /products/{productId}
// Get product by ID
func (c *Client) GetProduct(ctx context.Context, productId string) (*client.MultiResponse, error) {
	path := fmt.Sprintf("/products/%s", productId)

	resp, err := c.Request(ctx, "GET", path, nil)

	if err != nil {
		return nil, err
	}

	return &client.MultiResponse{Response: *resp}, nil
}

// UpdateProduct performs a PUT request to /products/{productId}
func (c *Client) UpdateProduct(ctx context.Context, productId string, req UpdateProductRequest) (*client.MultiResponse, error) {
	path := fmt.Sprintf("/products/%s", productId)

	resp, err := c.RequestJSON(ctx, "PUT", path, req)

	if err != nil {
		return nil, err
	}

	return &client.MultiResponse{Response: *resp}, nil
}

// DeleteProduct performs a DELETE request to /products/{productId}
// Delete a product
// Permanently removes a product from the catalog
func (c *Client) DeleteProduct(ctx context.Context, productId string) (*client.MultiResponse, error) {
	path := fmt.Sprintf("/products/%s", productId)

	resp, err := c.Request(ctx, "DELETE", path, nil)

	if err != nil {
		return nil, err
	}

	return &client.MultiResponse{Response: *resp}, nil
}
