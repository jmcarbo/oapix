openapi: 3.0.0
info:
  title: Well-Documented API Example
  version: 1.0.0
  description: |
    This API demonstrates the enhanced documentation generation
    feature in oapix that includes HTTP method and path information
    in generated Go client method documentation.

servers:
  - url: https://api.example.com/v1

paths:
  /products:
    get:
      operationId: listProducts
      summary: List all products
      description: |
        Retrieves a paginated list of all products in the catalog.
        The results can be filtered by various criteria including
        category, price range, and availability status.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - name: category
          in: query
          schema:
            type: string
          description: Filter by product category
      responses:
        '200':
          description: Successful response with product list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      operationId: createProduct
      summary: Create a new product
      description: |
        Creates a new product in the catalog.
        Requires admin authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      operationId: getProduct
      summary: Get product by ID
      # No description - will only show summary
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique product identifier
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      operationId: updateProduct
      # No summary or description - will only show method and path
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    delete:
      operationId: deleteProduct
      summary: Delete a product
      description: Permanently removes a product from the catalog
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

  /products/{productId}/reviews:
    get:
      # No operationId - will generate name from method and path
      summary: List product reviews
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          description: Unique product identifier
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: decimal
          description: Product price
        category:
          type: string
          description: Product category
        inStock:
          type: boolean
          description: Whether the product is in stock

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        category:
          type: string

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        category:
          type: string
        inStock:
          type: boolean

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object