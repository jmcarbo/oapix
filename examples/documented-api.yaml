openapi: 3.0.0
info:
  title: Documented API Example
  version: 1.0.0
  description: API to test comprehensive documentation generation

paths:
  /users:
    get:
      operationId: listUsers
      summary: List all users
      description: |
        Retrieves a paginated list of all users in the system.
        Supports filtering by status and sorting by creation date.
      parameters:
        - name: status
          in: query
          description: Filter users by status
          schema:
            type: string
            enum: [active, inactive, pending]
        - name: limit
          in: query
          description: Maximum number of users to return
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of users to skip
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful response with user list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        "400":
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized - missing or invalid authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      operationId: getUser
      summary: Get user by ID
      description: Retrieves detailed information about a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: updateUser
      summary: Update user
      description: |
        Updates an existing user's information.
        Returns different response types based on what was updated.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        "200":
          description: User updated - basic fields only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "201":
          description: User updated - including profile picture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithAvatar'
        "202":
          description: Update accepted - processing asynchronously
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStatus'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /search:
    post:
      operationId: searchItems
      # No summary - testing that case
      description: Search for items across multiple categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

  /simple-endpoint:
    get:
      operationId: simpleGet
      # No summary or description - testing minimal documentation
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        status:
          type: string

    UserWithAvatar:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            avatarUrl:
              type: string
            avatarSize:
              type: integer

    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
        offset:
          type: integer
        limit:
          type: integer

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
          format: binary

    UpdateStatus:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        estimatedCompletion:
          type: string
          format: date-time

    SearchRequest:
      type: object
      properties:
        query:
          type: string
        categories:
          type: array
          items:
            type: string

    SearchResults:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        totalCount:
          type: integer

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string